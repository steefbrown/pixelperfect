//  requests image and copies image to dst1 ($r0) and  dst2 ($r1)
//  $r0 destination 1 for copying image
//  $r1 destination 2 for copying image
//
main:
	movi 0, $r1
debounce:
	addi 1, $r1
	cmpi 255, $r1
	bne debounce

	movi 0, $r1
	movi 0x800004, $r13 // address of LEDs
	movi 0x800001, $r14  //mem map io for buttons

// write on LEDs
	movi 0xAA, $r11
	stor $r11, $r13	
button_press:
	load $r2, $r14
	cmpi 2, $r2		//assuming 2 is to take a picture (mem_map_io)
	bne button_press

capture_image:
//	push $r2
//	push $r3
//	push $r4
//	push $r5g
//	push $r6
//	push $r8
//	push $r9
//	push $r10
	
	movi 0, $r0
	movi 0, $r1
	movi 0x800003, $r2 //mem-map-io for uart_rx_count
	movi 0x800000, $r3 //mem-map-io for uart data
	movi 0, $r9		   // line number

// write on LEDs
	movi 0xEE, $r11
	stor $r11, $r13

do_line_loop:
	movi 0, $r6
	movi 0x0A, $r8
req_loop:			//loop to send req signal for image (10 A's)
	stor $r8, $r3
	addi 1, $r6
	cmpi 10, $r6
	bne req_loop

	//after bytes are sent, 
	movi 0, $r10	// col number
capture:
		load $r4, $r2
		cmpi 2, $r4   	//if the fifo has at least 2 items, grab them
		bgt capture		//wait for more data to enter fifo

		// write fifo number on leds
		//stor $r4, $r13

		load $r5, $r3	//load first value from uart
		slli 8, $r5		//set it in upper byte
		load $r6, $r3	//load second value
		or $r5, $r6		//combine the data
		stor $r6, $r0	//stor data at offset 0 of memory
		ori 0, $r0      // nop instruction to prevent write issues
	  //stor $r6, $r1	//stor data at offset 1 of memory

		addi 1, $r0		//increment address
	  //addi 1, $r1		//increment address

		addi 1, $r10
		cmpi 320, $r10   // 640/2 since we load 2 bytes off uart at once
		bne capture
		movi 0, $r10
		// here we have loaded the whole line

// begin next line
	addi 1, $r9
	cmpi 480, $r9
	bne do_line_loop


// send one last acknowledge
	movi 0, $r6
	movi 0x0A, $r8
req_loop_last:			//loop to send req signal for image (10 A's)
	stor $r8, $r3
	addi 1, $r6
	cmpi 10, $r6
	bne req_loop_last

// write on LEDs
	movi 0xDD, $r11
	stor $r11, $r13

	// pop all saved registers
//	pop $r10
//	pop $r9
//	pop $r8
//	pop $r6
//	pop $r5
//	pop $r4
//	pop $r3
//	pop $r2
end:
	buc end
//	END capture_image: