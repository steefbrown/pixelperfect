
// get_pic_line_ack.cr16

main:
	movi 0, $r1
debounce:
	addi 1, $r1
	cmpi 255, $r1
	bne debounce

	movi 0xCFFFFF, $r13 // address of LEDs
	movi 0x800001, $r1  //mem map io for buttons

button_press:
	load $r2, $r1
	cmpi 2, $r2		//assuming 2 is to take a picture (mem_map_io)
	bne button_press



	movi 0x0, $r1  		// memory address
	movi 0x800003, $r2 //mem-map-io for uart_rx_count
	movi 0x800000, $r3 //mem-map-io for uart data
	movi 0, $r9		// line number

send_req:
	movi 0, $r6
	movi 0x0A, $r8
req_loop:			//loop to send req signal for image (10 A's)
	stor $r8, $r3
	addi 1, $r6
	cmpi 10, $r6
	bne req_loop

	//after bytes are sent, 
	movi 0, $r10	// col number
capture:
		load $r4, $r2
		cmpi 2, $r4   	//if the fifo has at least 2 items, grab them
		bgt capture		//wait for more data to enter fifo

		// write fifo number on leds
		stor $r4, $r13

		load $r5, $r3	//load first value from uart
		slli 8, $r5		//set it in upper byte
		load $r6, $r3	//load second value
		or $r5, $r6		//combine the data
		stor $r6, $r1	//stor data at offset 0 of memory

		addi 1, $r1		//increment address

		addi 1, $r10
		cmpi 320, $r10   // 640/2 since we load 2 bytes off uart at once
		bne capture
		movi 0, $r10
		// here we have loaded the whole line

// write on LEDs
	movi 0x0A, $r11
	stor $r11, $r13
	movi 0, $r11
//wait_loop:
//	addi 1, $r11
//	cmpi 0x7FFFFF, $r11
//	bne wait_loop


// begin next line
	addi 1, $r9
	cmpi 480, $r9
	bne send_req


// write on LEDs
	movi 0xFF, $r11
	stor $r11, $r13

	
end:
	buc end

