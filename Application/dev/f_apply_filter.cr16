
f_apply_filter:
	push $r0
	push $r1
	push $r2
	push $r3 
	push $r4
	push $r5
	push $r6
	push $r7
	push $r8
	push $r9
	movi 0, $r8	
	movi 0x800004, $r6
	movi 0, $r7
cycle_selection:
	cmpi 1, $r7
	beq exit_effect
	call f_get_button // wait for button selection
	
	cmpi 4, $r0		// button right was pressed
	beq right
	cmpi 1, $r0
	beq left
	cmpi 2, $r0
	beq select
						// shouldnt occur
	buc cycle_selection
right:					// updates index for right button
	addi 1, $r8
	buc check 
left:					// updates index for left button
	subi 1, $r8
	buc check1
check:					// checks for edge cases
	cmpi 13, $r8
	bne apply_select
	movi 0, $r8
	buc apply_select
check1:					// check for second edge case
	cmpi -1, $r8
	bne apply_select
	movi 12, $r8
	buc apply_select

select:				// should apply filter to offset and return
	buc cycle_selection
	movi 153600, $r0
	movi 153600, $r3
	movi 1, $r7
	buc final_ret 

apply_select:		// updates forground image with filter
	stor $r8, $r6
	movi 153600, $r0  // move image params
	movi 0, $r1		  // dest
	call f_move_image
	movi 0, $r0
final_ret:
	cmpi 0, $r8
	beq cycle_selection	
	cmpi 1, $r8
	beq e_1
	cmpi 2, $r8
	beq e_2
	cmpi 3, $r8
	beq e_3
	cmpi 4, $r8
	beq e_4
	cmpi 5, $r8
	beq e_5
	cmpi 6, $r8
	beq e_6
	cmpi 7, $r8
	beq e_7
	cmpi 8, $r8
	beq e_8
	cmpi 9, $r8
	beq e_9
	cmpi 10, $r8
	beq e_10
	cmpi 11, $r8
	beq e_11
	cmpi 12, $r8
	beq e_12

e_1:
	call f_3_bit_color
	buc cycle_selection
e_2:
	call f_inv
	buc cycle_selection
e_3:
	call f_lighten
	buc cycle_selection
e_4:
	call f_darken
	buc cycle_selection
e_5:
	movi 0xE002, $r1
	call f_saturate_color
	buc cycle_selection
e_6:
	movi 0x1C02, $r1
	call f_saturate_color
	buc cycle_selection
e_7:
	movi 0x0303, $r1
	call f_saturate_color
	buc cycle_selection
e_8:
	mov $r0, $r3
	movi 0x14, $r0
	movi 0xF7, $r1
	movi 0xFE, $r2
	call f_pop_art
	buc cycle_selection
e_9:
	mov $r0, $r3
	movi 0xA0, $r0
	movi 0x9B, $r1
	movi 0xFC, $r2
	call f_pop_art
	buc cycle_selection
e_10:
	mov $r0, $r3
	movi 0x42, $r0
	movi 0xF2, $r1
	movi 0xFE, $r2
	call f_pop_art
	buc cycle_selection
e_11:
	call f_pixelate
	buc cycle_selection
e_12:
	movi 0x4A4a, $r1
	call f_saturate_color
	buc cycle_selection

exit_effect:
	pop $r9
	pop $r8
	pop $r7
	pop $r6
	pop $r5
	pop $r4
	pop $r3
	pop $r2
	pop $r1
	pop $r0
	ret
//***BEGIN POP ART GREEN FUNCTION***//
//**$r0 is the dark color (eg green)**//
//**$r1 is the mid color (eg purple)**//
//**$r2 is the light color (eg yellow)**//
//**$r3 is the destination address    **//
f_pop_art:
	push $r4
	push $r5
	push $r6
	push $r7
	push $r8
	movi 0, $r8 	//address counter
	
pop_art_loop:
	load $r4, $r8    //r7 is the working copy
	andi 0x9200, $r4
	mov $r4, $r5	 //$r2 is working copy
	//upper 4byte into 3bit
	srli 8, $r5
	cmpi 0x92, $r5 // yellow comparissons
	beq light_ub
	
	cmpi 0x90, $r5 // purple comparissons
	beq  mid_ub
	cmpi 0x82, $r5
	beq mid_ub
	cmpi 0x12, $r5
	beq mid_ub
	cmpi 0x80, $r5
	beq mid_ub
	cmpi 0x02, $r5
	beq mid_ub

	mov $r0, $r6
return_1:
	slli 8, $r6
	load $r4, $r3    //r7 is the working copy
	andi 0x0092, $r4
	mov $r4, $r5 //$r2 is working copy
	cmpi 0x92, $r5 // yellow comparissons
	beq light_lb
	
	cmpi 0x90, $r5 // purple comparissons
	beq  mid_lb
	cmpi 0x82, $r5
	beq mid_lb
	cmpi 0x12, $r5
	beq mid_lb
 	cmpi 0x80, $r5
	beq mid_lb
	cmpi 0x02, $r5
	beq mid_lb

	mov $r0, $r7	

return_2:
	or $r6, $r7
	stor $r7, $r3
	addi 1, $r3
	addi 1, $r8
	cmpi 153600, $r8
	bne pop_art_loop
	buc end_pop_art

light_ub:
	mov $r2, $r6
	buc return_1
mid_ub:
	mov $r1, $r6
	buc return_1
light_lb:
	mov $r2, $r7
	buc return_2
mid_lb:
	mov $r1, $r7
	buc return_2
end_pop_art:
	pop $r8
	pop $r7
	pop $r6
	pop $r5
	pop $r4
	ret
//***END POP ART GREEN FUNCTION***//



//***BEGIN SATURATE COLOR***//
//$r0 - address
//$r1 is the color to saturate 	- 0x1C1C for green
//								- 0x0303 for blue
//								- 0xE0E0 for red
f_saturate_color:
	push $r7
	push $r8
	movi 0, $r8 	//address counter

saturate_color_loop:
	load $r7, $r0    //r7 is the working copy
	or $r1, $r7
	stor $r7, $r0
	addi 1, $r8
	addi 1, $r0
	cmpi 153600, $r8
	bne saturate_color_loop

	pop $r8
	pop $r7
	ret
//***END SATURATE COLOR***//

//***3_BIT_COLOR BEGIN***//
//$r0 - address to apply to

f_3_bit_color:
	push $r1
	push $r2
	movi 0, $r2
3_bit_loop:
	load $r1, $r0    //r7 is the working copy
		
	andi 0x9292, $r1
	stor $r1, $r0   //save pixel

	addi 1, $r2
	addi 1, $r0
	cmpi 153600, $r2
	bne 3_bit_loop


	pop $r2
	pop $r1
	ret
//**3 BIT COLOR END
//***DARKEN BEGIN***///
//NO ARGS
f_darken:
	push $r1
	push $r2
	movi 0, $r2 	//address counter

darken_loop:
	load $r1, $r0    //r1 is the working copy
	andi 0x6D6D, $r1
	stor $r1, $r0
	addi 1, $r0
	addi 1, $r2
	cmpi 153600, $r2
	bne darken_loop

	pop $r2
	pop $r1
	ret
//***DARKEN END***///
//***BEGIN LIGHTEN***//
f_lighten:
	push $r1
	push $r2
	movi 0, $r2 	//address counter

lighten_loop:
	load $r1, $r0    //r1 is the working copy
	ori 0x9292, $r1	 
	stor $r1, $r0
	addi 1, $r0
	addi 1, $r2
	cmpi 153600, $r2
	bne lighten_loop

	pop $r2
	pop $r1
	ret
//***END LIGHTEN***//



//***INV COLOR BEGIN***//
//$r0 - address to apply to

f_inv:
	push $r1
	push $r2
	movi 0, $r2
inv_loop:
	load $r1, $r0    //r7 is the working copy
		
	xori -1, $r1
	stor $r1, $r0   //save pixel

	addi 1, $r2
	addi 1, $r0
	cmpi 153600, $r2
	bne inv_loop


	pop $r2
	pop $r1
	ret
//**INV COLOR END

// returns in $r0, 1=left, 2=center, 4=right
f_get_button:
	push $r1
	movi 0x800001, $r1  //mem map io for buttons
get_button_loop:
	load $r0, $r1
	cmpi 1, $r0			//assuming 2 is to take a picture (mem_map_io)
	beq end_get_button
	cmpi 2, $r0
	beq end_get_button
	cmpi 4, $r0
	beq end_get_button
	buc get_button_loop
end_get_button
	pop $r1
	ret
//	moves_image: moves image from src_offset ($r0) to dest_offset ($r1)
//	$r0 src_offset
//  $r1 dest_offset
f_move_image:
		push $r2        // save intermediate data register
		push $r3        // save count reg
		movi 0, $r3
		
move_image_Loop:
		load $r2, $r0	//load first value from memory
		ori 0, $r0
		stor $r2, $r1	//stor data image at offset r1 of memory

		addi 1, $r0		//increment src address
		addi 1, $r1     //increment dest address
		addi 1, $r3     // increment count
		
		
		cmpi 153600, $r3   // 640/2 * 480 = 153600 
		bgt move_image_Loop
		
		// here we have moved the whole image
		pop $r3        // restore intermediate data register
		pop $r2        // restore count reg
	ret

//pixelate a 16x16 block of pixels

f_pixelate:
	push $r1
	push $r2
	push $r3
	push $r4
	push $r5
	push $r6
	push $r9
	movi 0, $r6 //address counter
	movi 0, $r9 //line counter

pixelate_next_pixel:
	mov $r0, $r1 //copy address for pixel block loop
	addi 2564, $r1
	load $r2, $r1 //load the pixel to copy
	subi 2564, $r1
	andi 0xFF00, $r2 //mask of 2nd pixel
	mov $r2, $r3	//copy pixel
	srli 8, $r2		//shift into place
	or $r3, $r2		//copies to the other pixel within the address
	movi 0, $r4	//outer loop counter
	movi 0, $r5	//inner loop counter
pixelate_inner:
	stor $r2, $r1 	//place the pixel
	addi 1, $r1 	//increment address
	addi 1, $r4 	//increment line counter
	cmpi 8, $r4
	bne pixelate_inner
pixelate_outer:
	movi 0, $r4
	addi 312, $r1 	//set up next block
	addi 1, $r5	//increment lines done in block
	cmpi 16, $r5 	//if 16 have been done, next pixel
	beq pixelate_next_address
	buc pixelate_inner

pixelate_next_address:
	movi 0, $r5
	addi 8, $r9
	cmpi 320, $r9
	beq pixelate_next_line
	addi 8, $r0
	addi 8, $r6
	buc pixelate_next_pixel

pixelate_next_line:
	movi 0, $r9
	addi 4816, $r0
	addi 4816, $r6
	cmpi 153600, $r6
	bgt pixelate_next_pixel

pixelate_end:
	pop $r9
	pop $r6
	pop $r5
	pop $r4
	pop $r3
	pop $r2
	pop $r1
	ret
	

