main:

	movi 0, $r1
debounce:
	addi 1, $r1
	cmpi 255, $r1
	bne debounce

// write 1 to LED
	movi 	0xC0000F, $r13 	// addr to latch to leds
	movi 	1, $r12	// led value
	stor 	$r12, $r13

	movi 0x800001, $r1  //mem map io for buttons

button_press:
	load $r2, $r1
	cmpi 2, $r2		//assuming 2 is to take a picture (mem_map_io)
	bne button_press


// update led
	movi 	2, $r12	// led value
	stor 	$r12, $r13


	movi 0, $r6
	movi 0x800000, $r7
	movi 0x0A, $r8

req_loop:			//loop to send req signal for image (10 A's)
	stor $r8, $r7
	addi 1, $r6
	cmpi 10, $r6
	bne req_loop


// update led
	movi 	3, $r12	// led value
	stor 	$r12, $r13


	//after bytes are sent, 
	movi 0x0, $r1  //counter to get pic (address)
	movi 0x800003, $r2 //mem-map-io for uart rx_count
	movi 0x800000, $r3 //mem-map-io for uart data

capture:
	load $r4, $r2
	cmpi 2, $r4   	//if the fifo has at least 2 items, grab them
	bgt capture		//wait for more data to enter fifo
	load $r5, $r3	//load first value from uart
	slli 8, %r5		//set it in upper byte
	load $r6, $r3	//load second value
	or $r5, $r6		//combine the data
	stor $r6, $r1	//stor data at offset 0 of memory
	addi 1, $r1		//increment address
	cmpi 0x25800, $r1   //640*480/2 bytes, 1 image
	bne capture

	movi 0x800001, $r1
wait_effects:
	load $r2, $r1
	cmpi 4, $r2		//4 to apply effects (mem_map_io)
	bne button_press

	movi 0, $r1

effect_inv:
	load $r2, $r1
	xori 0xFFFF, $r2
	stor $r2, $r1
	addi 1 $r1
	cmpi 0x25800, $r1
	bne effect_inv
	
// update led
	movi 	4, $r12	// led value
	stor 	$r12, $r13

end:
	buc end

